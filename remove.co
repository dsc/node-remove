fs   = require 'fs'
path = require 'path'
{exists, existsSync} = path

Seq = require 'seq'


removeSync = exports.removeSync = function removeSync(paths, options={})
    paths = [paths] if typeof paths is 'string'
    options = {verbose, ignoreErrors, ignoreMissing} = 
        ({-verbose, -ignoreErrors, -ignoreMissing} import options)
    
    for p of paths
        console.log "rm -rv #p" if verbose
        try
            stats = fs.statSync p
            
            # files can be removed right away
            unless stats.isDirectory()
                fs.unlinkSync p
            else
                # directories need to be empty
                contents = fs.readdir p
                if contents.length
                    contents.map -> removeSync it, options
                
                # finally, kill it
                fs.rmdirSync p
        catch err
            console.error err if verbose
            if ignoreErrors or (ignoreMissing and err.code is 'ENOENT')
                continue
            else
                throw err
    void

removeAsync = exports.removeAsync = (paths, options, cb) ->
    paths = [paths] if typeof paths is 'string'
    if typeof options is 'function'
        [cb, options] = [options, {}]
    if typeof cb is not 'function'
        throw new Error 'Callback must be a function!'
    options = {verbose, ignoreErrors, ignoreMissing} = 
        ({-verbose, -ignoreErrors, -ignoreMissing} import options)
    
    Seq(paths)
        .parEach_ (p, next_path) ->
            console.log "rm -rv #p" if verbose
            Seq()
            .seq fs.stat, p, Seq
            .seq (stats) ->
                # Files can be removed right away, and then move on to the next path
                unless stats.isDirectory()
                    fs.unlink p, next_path
                else
                    # ...But directories need to be empty
                    fs.readdir p, this
            # Remove children with the same options
            .seq (contents) -> removeAsync contents, options, this
            # Finally, kill it
            .seq fs.rmdir, p, Seq
            # And terminate the async chain
            .seq next_path.ok
            # Propagate errors
            .catch (err) -> next_path err
        
        # Notify callback!
        .seq -> cb null
        .catch (err) ->
            console.error err if verbose
            return @ok() if ignoreErrors or (ignoreMissing and err.code is 'ENOENT')
            cb err
    void
